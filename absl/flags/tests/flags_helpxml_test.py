
# Copyright 2017 The Abseil Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Unit tests for the XML-format help generated by the flags.py module."""

import enum
import io
import os
import string
import sys
import xml.dom.minidom
import xml.sax.saxutils

from absl import flags
from absl.flags import _helpers
from absl.flags.tests import module_bar
from absl.testing import absltest


class CreateXMLDOMElement(absltest.TestCase):

  def _check(self, name, value, expected_output):
    doc = xml.dom.minidom.Document()
    node = _helpers.create_xml_dom_element(doc, name, value)
    output = node.toprettyxml('  ', encoding='utf-8')
    self.assertEqual(expected_output, output)

  def test_create_xml_dom_element(self):
    self._check('tag', '', b'<tag></tag>\n')
    self._check('tag', 'plain text', b'<tag>plain text</tag>\n')
    self._check('tag', '(x < y) && (a >= b)',
                b'<tag>(x &lt; y) &amp;&amp; (a &gt;= b)</tag>\n')

    # If the value is bytes with invalid unicode:
    bytes_with_invalid_unicodes = b'\x81\xff'
    # In python 3 the string representation is "b'\x81\xff'" so they are kept
    # as "b'\x81\xff'".
    self._check('tag', bytes_with_invalid_unicodes,
                b"<tag>b'\\x81\\xff'</tag>\n")

    # Some unicode chars are illegal in xml
    # (http://www.w3.org/TR/REC-xml/#charsets):
    self._check('tag', u'\x0b\x02\x08\ufffe', b'<tag></tag>\n')

    # Valid unicode will be encoded:
    self._check('tag', u'\xff', b'<tag>\xc3\xbf</tag>\n')


def _list_separators_in_xmlformat(separators, indent=''):
  """Generates XML encoding of a list of list separators.

  Args:
    separators: A list of list separators.  Usually, this should be a
      string whose characters are the valid list separators, e.g., ','
      means that both comma (',') and space (' ') are valid list
      separators.
    indent: A string that is added at the beginning of each generated
      XML element.

  Returns:
    A string.
  """
  result = ''
  separators = list(separators)
  separators.sort()
  for sep_char in separators:
    result += ('%s<list_separator>%s</list_separator>\n' %
               (indent, repr(sep_char)))
  return result


class FlagCreateXMLDOMElement(absltest.TestCase):
  """Test the create_xml_dom_element method for a single flag at a time.

  There is one test* method for each kind of DEFINE_* declaration.
  """

  def setUp(self):
    # self.fv is a FlagValues object, just like flags.FLAGS.  Each